services:
  db:
    image: timescale/timescaledb:2.16.1-pg16
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7.2
    volumes:
      - redis_data:/data

  api:
    build:
      context: .
      dockerfile: services/api/Dockerfile
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "${API_PORT}:8080"
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request,sys; u='http://localhost:8080/health/sources'; sys.exit(0 if urllib.request.urlopen(u, timeout=3).status==200 else 1)\""]
      interval: 30s
      timeout: 5s
      retries: 5

  scheduler:
    build:
      context: .
      dockerfile: services/scheduler/Dockerfile
    env_file: .env
    ports:
      - "4200:4200"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:4200/docs', timeout=3).status==200 else 1)\""]
      interval: 10s
      timeout: 5s
      retries: 10

  worker:
    build:
      context: .
      dockerfile: services/worker/Dockerfile
    env_file: .env
    volumes:
      - ./flows:/app/flows
      - ./libs:/app/libs
      - ./configs:/app/configs
    depends_on:
      scheduler:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped

  tunnel:
    image: cloudflare/cloudflared:latest
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    environment:
      TUNNEL_TOKEN: ${CLOUDFLARE_TUNNEL_TOKEN}
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - default

  metabase:
    image: metabase/metabase:v0.49.13
    ports:
      - "3000:3000"
    environment:
      MB_DB_FILE: ${MB_DB_FILE}
    volumes:
      - metabase_data:/metabase-data
    depends_on:
      db:
        condition: service_healthy

volumes:
  db_data:
  redis_data:
  metabase_data:

networks:
  default:
    name: etheatmap_default
